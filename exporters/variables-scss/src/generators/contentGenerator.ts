import { Token, TokenGroup, TokenType } from '@supernovaio/sdk-exporters';
import { generateCssFromTokens } from './cssGenerator';
import { generateCssObjectFromTokens } from './cssObjectGenerator';
import { formatCSS } from '../formatters/cssFormatter';

// Add disclaimer to the top of the content
export const addDisclaimer = (content: string): string => {
  return `/* This file was generated by Supernova, don't change manually */\n${content}`;
};

export const filterTokensByTypeAndGroup = (tokens: Token[], type: TokenType, group: string) => {
  return tokens.filter((token) => token.tokenType === type && token.origin?.name?.includes(group));
};

export const generateFileContent = (
  tokens: Token[],
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
  tokenTypes: TokenType[],
  groupNames: string[],
  withCssObject: boolean,
  hasParentPrefix: boolean,
) => {
  let cssTokens = '';
  let cssObject = '';

  // Iterate over token types and group names to filter tokens
  tokenTypes.forEach((tokenType) => {
    groupNames.forEach((group) => {
      const filteredTokens = filterTokensByTypeAndGroup(tokens, tokenType, group);

      // Generate css tokens
      cssTokens += generateCssFromTokens(filteredTokens, mappedTokens, tokenGroups, hasParentPrefix);
      cssTokens += '\n\n';

      // Generate css object
      cssObject += generateCssObjectFromTokens(filteredTokens, mappedTokens, tokenGroups, hasParentPrefix);
    });
  });

  const content = withCssObject ? `${cssTokens}${cssObject}` : cssTokens;

  return {
    content: addDisclaimer(formatCSS(content)),
  };
};
