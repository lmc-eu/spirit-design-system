import { Token, TokenGroup, TokenType } from '@supernovaio/sdk-exporters';
import { generateCssFromTokens } from './cssGenerator';
import { CssObjectType, generateCssObjectFromTokens } from './cssObjectGenerator';
import { formatCSS } from '../formatters/cssFormatter';
import { convertToScss, deepMergeObjects } from '../helpers/cssObjectHelper';
import { FileData } from '../config/fileConfig';

// Add disclaimer to the top of the content
export const addDisclaimer = (content: string): string => {
  return `/* This file was generated by Supernova, don't change manually */\n${content}`;
};

export const filterTokensByTypeAndGroup = (tokens: Token[], type: TokenType, group: string) => {
  return tokens.filter((token) => token.tokenType === type && token.origin?.name?.includes(group));
};

export const generateFileContent = (
  tokens: Token[],
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
  fileData: FileData,
) => {
  let cssTokens = '';
  let cssObject: CssObjectType = {};
  const { groupNames, hasParentPrefix = true, sortByNumValue = false, withCssObject = true, tokenTypes } = fileData;

  // Iterate over token types and group names to filter tokens
  tokenTypes.forEach((tokenType) => {
    groupNames.forEach((group) => {
      const filteredTokens = filterTokensByTypeAndGroup(tokens, tokenType, group);

      // Generate css tokens
      cssTokens += generateCssFromTokens(
        filteredTokens,
        mappedTokens,
        tokenGroups,
        group,
        hasParentPrefix,
        sortByNumValue,
      );
      cssTokens += '\n\n';

      // Generate css object and merge it with the existing one
      const groupCssObject = generateCssObjectFromTokens(filteredTokens, mappedTokens, tokenGroups, hasParentPrefix);
      cssObject = deepMergeObjects(cssObject, groupCssObject);
    });
  });

  let content = cssTokens;

  // convert css object to scss structure
  if (withCssObject) {
    content += Object.entries(cssObject)
      .map(([key, obj]) => `${key}: (\n${convertToScss(obj as CssObjectType)}\n) !default;\n\n`)
      .join('');
  }

  return {
    content: addDisclaimer(formatCSS(content)),
  };
};
