import fs from 'fs';
import path from 'path';
import { Supernova, Token, TokenGroup, TokenTheme } from '@supernovaio/sdk-exporters';
import { generateFiles, generateOutputFilesByThemes } from '../fileGenerator';
import { exampleMockedGroups, exampleMockedTokens } from '../../../tests/fixtures/mockedExampleTokens';
import { nonThemedFilesData } from '../../config/fileConfig';

const mockedExpectedResult = fs.readFileSync(
  path.join(__dirname, '../../../tests/fixtures/exampleFileContent.scss'),
  'utf-8',
);
const mappedTokens: Map<string, Token> = new Map([]);
const tokenGroups: Array<TokenGroup> = exampleMockedGroups;
const emptyFile = `/* This file was generated by Supernova, don't change manually */\n\n`;
const indexFile = `@forward 'borders';
@forward 'other';
@forward 'radii';
@forward 'spacing';
@forward 'shadows';
@forward 'gradients';
@forward 'typography';
`;
const indexColorFile = `@forward 'colors';\n`;

describe('fileGenerator', () => {
  describe('generateOutputFilesByThemes', () => {
    it('should generate output files by themes', async () => {
      const tokens = Array.from(exampleMockedTokens.values());
      const sdk = {
        tokens: {
          computeTokensByApplyingThemes: jest.fn().mockResolvedValue(tokens),
        },
      };
      const themes = [{ name: 'theme-light' }, { name: 'theme-light-inverted' }];
      const outputFiles = await generateOutputFilesByThemes(
        tokens,
        mappedTokens,
        tokenGroups,
        themes as TokenTheme[],
        sdk as unknown as Supernova,
      );

      expect(outputFiles).toStrictEqual([
        {
          path: './globals/',
          fileName: '_borders.scss',
          content: emptyFile,
        },
        { path: './globals/', fileName: '_other.scss', content: mockedExpectedResult },
        { path: './globals/', fileName: '_radii.scss', content: emptyFile },
        { path: './globals/', fileName: '_spacing.scss', content: emptyFile },
        { path: './globals/', fileName: '_shadows.scss', content: emptyFile },
        { path: './globals/', fileName: '_gradients.scss', content: emptyFile },
        { path: './globals/', fileName: '_typography.scss', content: emptyFile },
        { path: './globals/', fileName: 'index.scss', content: indexFile },
        { path: './themes/theme-light/', fileName: '_colors.scss', content: emptyFile },
        { path: './themes/theme-light/', fileName: 'index.scss', content: indexColorFile },
        { path: './themes/theme-light-inverted/', fileName: '_colors.scss', content: emptyFile },
        { path: './themes/theme-light-inverted/', fileName: 'index.scss', content: indexColorFile },
      ]);
    });
  });

  describe('generateFiles', () => {
    it('should generate files', () => {
      const tokens = Array.from(exampleMockedTokens.values());
      const files = generateFiles(tokens, mappedTokens, tokenGroups, nonThemedFilesData);

      expect(files).toStrictEqual([
        {
          fileName: '_borders.scss',
          content: emptyFile,
        },
        { fileName: '_other.scss', content: mockedExpectedResult },
        { fileName: '_radii.scss', content: emptyFile },
        { fileName: '_spacing.scss', content: emptyFile },
        { fileName: '_shadows.scss', content: emptyFile },
        { fileName: '_gradients.scss', content: emptyFile },
        { fileName: '_typography.scss', content: emptyFile },
      ]);
    });
  });
});
