import { Token, TokenGroup, TokenType } from '@supernovaio/sdk-exporters';
import { exportConfiguration } from '../../index';
import { formatCSS } from '../formatters/cssFormatter';
import { generateCssFromTokens, generateCssObjectFromTokens } from './cssGenerator';

// Add disclaimer to the top of the content
const addDisclaimer = (content: string): string => {
  if (exportConfiguration.generateDisclaimer) {
    return `/* This file was generated by Supernova, don't change manually */\n${content}`;
  }

  return content;
};

const filterTokensByTypeAndGroup = (tokens: Token[], type: TokenType, group: string) =>
  tokens.filter((token) => token.tokenType === type && token.origin?.name?.includes(group));

export const generateFileContent = (
  tokens: Token[],
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
  tokenTypes: TokenType[],
  groupNames: string[],
  withCssObject: boolean,
  hasParentPrefix: boolean,
) => {
  let cssTokens = '';
  let cssObject = '';

  // If tokenTypes or groupNames are strings, convert them to arrays
  // const tokenTypesArray = Array.isArray(tokenTypes) ? tokenTypes : [tokenTypes];
  // const groupNamesArray = Array.isArray(groupNames) ? groupNames : [groupNames];

  // Iterate over token types and group names to filter tokens
  tokenTypes.forEach((tokenType) => {
    console.log(tokenType);
    groupNames.forEach((group) => {
      console.log(group);
      const filteredTokens = filterTokensByTypeAndGroup(tokens, tokenType, group);

      console.log(filteredTokens);

      // Generate css tokens
      cssTokens += generateCssFromTokens(filteredTokens, mappedTokens, tokenGroups, hasParentPrefix);
      cssTokens += '\n\n';

      // Generate css object
      const tempCssObject = generateCssObjectFromTokens(filteredTokens, mappedTokens, tokenGroups, hasParentPrefix);
      if (tempCssObject !== null) {
        cssObject += tempCssObject;
      }
    });
  });

  let content = withCssObject ? `${cssTokens}${cssObject}` : cssTokens;
  content = formatCSS(content);

  return {
    content: addDisclaimer(content),
  };
};
