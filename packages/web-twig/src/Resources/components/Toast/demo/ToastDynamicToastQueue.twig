<!-- Toast alignment demo: start -->
<script>
    const setToastAlignmentX = (event, selector) => {
        const toastElement = document.querySelector(selector);

        toastElement.classList.remove('Toast--left', 'Toast--center', 'Toast--right');
        toastElement.classList.add(`Toast--${event.target.value}`);
    };

    const setToastAlignmentY = (event, selector) => {
        const toastElement = document.querySelector(selector);

        toastElement.classList.remove('Toast--top', 'Toast--bottom');
        toastElement.classList.add(`Toast--${event.target.value}`);
    };

    const setToastCollapsing = (event, selector) => {
        const toastElement = document.querySelector(selector);

        toastElement.classList.toggle('Toast--collapsible');
    };
</script>

<!-- Dynamic queue demo: start -->
<script type="module">
    // Disable interval field if auto close is not checked.
    const autoCloseIntervalField = document.getElementById('toast-auto-close-interval');
    const enableAutoCloseCheckbox = document.getElementById('toast-enable-auto-close');

    enableAutoCloseCheckbox.addEventListener('change', (event) => {
    autoCloseIntervalField.disabled = !event.target.checked;
    });

    // Initialize the field state.
    autoCloseIntervalField.disabled = !enableAutoCloseCheckbox.checked;

    // Disable link field if add link is not checked.
    const linkField = document.getElementById('toast-link');
    const enableLinkCheckbox = document.getElementById('toast-enable-link');

    enableLinkCheckbox.addEventListener('change', (event) => {
        linkField.disabled = !event.target.checked;
    });

    // Initialize the field state.
    linkField.disabled = !enableLinkCheckbox.checked;
</script>

<form>
    <fieldset onchange="setToastCollapsing(event, '#toast-example')" style="border: 0;">
        <Checkbox name="is-collapsible" autocomplete="off" id="toast-is-collapsible" isChecked label="Collapsible" />
    </fieldset>
    <fieldset onchange="setToastAlignmentY(event, '#toast-example')" style="border: 0;">
        <legend>Vertical alignment:</legend>
        <Radio name="toast-alignment-y" autocomplete="off" marginRight="600" value="top" id="toast-alignment-top" label="Top" />
        <Radio name="toast-alignment-y" autocomplete="off" marginRight="600" value="bottom" id="toast-alignment-bottom" label="Bottom" isChecked />
    </fieldset>
    <fieldset onchange="setToastAlignmentX(event, '#toast-example')" style="border: 0;">
        <legend>Horizontal alignment:</legend>
        <Radio name="toast-alignment-x" autocomplete="off" marginRight="600" value="left" id="toast-alignment-left" label="Left" />
        <Radio name="toast-alignment-x" autocomplete="off" marginRight="600" value="center" id="toast-alignment-center" label="Center" isChecked />
        <Radio name="toast-alignment-x" autocomplete="off" marginRight="600" value="right" id="toast-alignment-right" label="Right" />
    </fieldset>
</form>
<!-- Toast alignment demo: end -->

<!-- Dynamic queue demo: start -->
<form>
    <fieldset style="border: 0;">
        <legend class="mb-500">New Toast:</legend>
        <Stack hasSpacing>
            <Select
                label="Color"
                name="color"
                id="toast-color"
                autocomplete="off"
            >
                <option value="neutral">Neutral</option>
                <option value="success">Success</option>
                <option value="warning">Warning</option>
                <option value="danger">Danger</option>
                <option value="informative">Informative</option>
            </Select>
            <Checkbox name="has-icon" autocomplete="off" id="toast-has-icon" isChecked label="Has icon" />
            <Checkbox name="is-dismissible" autocomplete="off" id="toast-is-dismissible" isChecked label="Dismissible" />
            <Checkbox name="enable-auto-close" autocomplete="off" id="toast-enable-auto-close" isChecked label="Enable AutoClose" />
            <TextField
                autocomplete="off"
                type="number"
                min="0"
                max="60000"
                step="500"
                label="AutoClose interval (ms)"
                name="auto-close-interval"
                id="toast-auto-close-interval"
                value="3000"
            />
            <TextArea
                autocomplete="off"
                label="Message"
                name="message"
                id="toast-message"
                helperText="Can contain HTML."
                value="This is a new toast message."
            />
            <Checkbox name="enable-link" autocomplete="off" id="toast-enable-link" isChecked label="Add link" />
            <TextArea
                autocomplete="off"
                label="Link"
                name="link"
                id="toast-link"
                helperText="Can contain HTML."
                value="This is a toast link."
            />
            <div>
                <Button onclick="addDynamicToast(event, 'toast-example');">
                    Add
                </Button>
                <Button color="secondary" onclick="clearQueue(event, 'toast-example');">
                    Clear queue
                </Button>
            </div>
        </Stack>
    </fieldset>
</form>
<!-- Dynamic queue demo: end -->

<!-- Toast and visual keyboard demo: start -->
<script>
    // Experimental, Chrome 94+ on Android only:
    // Enable CSS to detect the presence of virtual keyboard.
    if ('virtualKeyboard' in navigator) {
        navigator.virtualKeyboard.overlaysContent = true;
    }
</script>
<form>
    <fieldset style="border: 0;">
        <legend class="mb-500">Virtual keyboard interaction:</legend>
        <TextField
            id="text-field-for-focus"
            label="In Chrome on Android, tap into this text field to see how Toast position updates:"
            name="default"
            placeholder="Tap here!"
        />
    </fieldset>
</form>
<!-- Toast and visual keyboard demo: end -->

<div hidden>
    <Icon name="check-plain" isSymbol />
    <Icon name="danger" isSymbol />
    <Icon name="info" isSymbol />
    <Icon name="warning" isSymbol />
</div>

<Toast id="toast-example">

    <template data-spirit-snippet="item">
        <ToastBar isTemplate color="success" hasIcon isDismissible>
            <ToastBarMessage></ToastBarMessage>
            <ToastBarLink href="#"></ToastBarLink>
        </ToastBar>
    </template>

    <ToastBar color="success" id="my-dismissible-toast" hasIcon isDismissible>
        <ToastBarMessage>I was first!</ToastBarMessage>
        <ToastBarLink href="#">Action</ToastBarLink>
    </ToastBar>

    <ToastBar color="informative" id="my-other-dismissible-toast" hasIcon isDismissible>
        <ToastBarMessage>I appeared later. This toast has a long message that wraps automatically.</ToastBarMessage>
        <ToastBarLink href="#">Action</ToastBarLink>
    </ToastBar>

</Toast>

{{ encore_entry_script_tags('toastDynamic') }}
