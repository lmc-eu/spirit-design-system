<p class="mb-0">
    The following example is using external library <a href="https://floating-ui.com">Floating UI</a>.
    Try scrolling the frame or resizing the window to see how the Tooltip behaves. The Floating UI
    library is trying to keep the Tooltip in the viewport and it is also flipping, shifting and
    resizing the Tooltip when it is not possible to keep it in the viewport.
</p>

<Alert color="informative">
    Please note that the Floating UI library is trying to point the arrow to the center
    of the trigger element. This is not possible to achieve in CSS only so our behavior
    is slightly different for tooltips not using Floating UI.
</Alert>

<Select id="my-advanced-select" label="Suggested placement">
    <option value="top-start" selected>top-start</option>
    <option value="top">top</option>
    <option value="top-end">top-end</option>
    <option value="right-start">right-start</option>
    <option value="right">right</option>
    <option value="right-end">right-end</option>
    <option value="bottom-start">bottom-start</option>
    <option value="bottom">bottom</option>
    <option value="bottom-end">bottom-end</option>
    <option value="left-start">left-start</option>
    <option value="left">left</option>
    <option value="left-end">left-end</option>
</Select>

<style>
    .example-viewport {
        width: 100%;
        max-width: 100%;
        height: 30rem;
        overflow: auto;
    }

    .example-content {
        position: relative;
        width: 300%;
        height: 60rem;
        padding-block: 12rem;
        text-align: center;
    }
</style>

<div class="example-viewport bg-cover spirit-feature-tooltip-enable-data-placement" id="my-advanced-viewport">
    <div class="example-content" id="my-advanced-content">
        <Button
            id="my-button"
            aria-describedby="my-advanced-tooltip"
        >
            I have a Floating tooltip!
        </Button>
        <Tooltip
            id="my-advanced-tooltip"
            {# We should be setting the placement prop here and not data attribute because that should be set
            in the Tooltip inner implementation. But we cannot change the inner implementation because it would
            break code of our users. But we can set the data attribute manually and make it work this way. #}
            data-spirit-placement="top-start"
            data-spirit-placement-controlled
        >
            This long tooltip is flipping, resizing and shifting to stay in the viewport.
            Also its arrow is always trying to point to the center of the trigger.
        </Tooltip>
    </div>
</div>

<script type="module">
  // To fully understand Floating UI and its options, please consult Floating UI docs:
  // @see https://floating-ui.com

  import {
      arrow,
      autoUpdate,
      computePosition,
      flip,
      offset,
      limitShift,
      shift,
      size,
  } from 'https://cdn.skypack.dev/@floating-ui/dom@1.5.3';

  const button = document.getElementById('my-button');
  const tooltip = document.getElementById('my-advanced-tooltip');
  const select = document.getElementById('my-advanced-select');
  const viewport = document.getElementById('my-advanced-viewport');
  const content = document.getElementById('my-advanced-content');
  const arrowEl = tooltip.querySelector('[data-spirit-element="arrow"]');

  const tooltipComputedStyle = window.getComputedStyle(tooltip);
  const tooltipMaxWidth = parseInt(tooltipComputedStyle.maxWidth, 10);
  const tooltipOffset = parseInt(tooltipComputedStyle.getPropertyValue('--tooltip-offset'), 10);
  const arrowCornerOffset = parseInt(
      window.getComputedStyle(arrowEl).getPropertyValue('--tooltip-arrow-corner-offset'),
      10,
  );

  function updateTooltipPosition() {
      computePosition(button, tooltip, {
          placement: tooltip.dataset.spiritPlacement,
          middleware: [
              offset(tooltipOffset),
              flip({
                  crossAxis: false,
              }),
              shift({
                  limiter: limitShift({
                      offset: ({ rects }) => ({
                          mainAxis: rects.reference.height,
                      }),
                  }),
              }),
              size({
                  apply({ availableWidth }) {
                      Object.assign(tooltip.style, {
                          maxWidth: `${tooltipMaxWidth < availableWidth ? tooltipMaxWidth : availableWidth}px`,
                      });
                  },
              }),
              arrow({ element: arrowEl, padding: arrowCornerOffset }), // arrow() should be placed at the end
          ],
      }).then(({ x, y, middlewareData, placement }) => {
          Object.assign(tooltip.style, {
              top: `${y}px`,
              left: `${x}px`,
          });

          const side = placement.split('-')[0];

          const staticSide = {
              top: 'bottom',
              right: 'left',
              bottom: 'top',
              left: 'right',
          }[side];

          if (middlewareData.arrow) {
              const offset =
                  staticSide === 'top' || staticSide === 'bottom'
                      ? arrowEl.offsetHeight
                      : (arrowEl.offsetHeight + arrowEl.offsetWidth) / 2;
              const { x, y } = middlewareData.arrow;
              Object.assign(arrowEl.style, {
                  left: x != null ? `${x}px` : '',
                  top: y != null ? `${y}px` : '',
                  bottom: '',
                  right: '',
                  [staticSide]: `-${offset}px`,
              });
          }

          tooltip.dataset.spiritPlacement = placement;
      });
  }

  window.onload = () => {
      viewport.scrollLeft = (content.offsetWidth - viewport.offsetWidth) / 2;
  };

  const cleanup = autoUpdate(button, tooltip, updateTooltipPosition);

  select.addEventListener('change', () => {
      tooltip.dataset.spiritPlacement = select.value;
      updateTooltipPosition();
  });

  // Call cleanup function when tooltip is removed from DOM.
  // cleanup();
</script>
