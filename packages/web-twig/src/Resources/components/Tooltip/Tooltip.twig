{# API #}
{%- set props = props | default([]) -%}
{%- set _closeLabel = props.closeLabel | default('Close') -%}
{%- set _id = props.id | default(null) -%}
{%- set _isDismissible = props.isDismissible | default(false) -%}
{%- set _placement = props.placement | default('bottom') -%}

{# Class names #}
{%- set _arrowClassName = _spiritClassPrefix ~ 'Tooltip__arrow' -%}
{%- set _closeClassName = _spiritClassPrefix ~ 'Tooltip__close' -%}
{%- set _rootClassName = _spiritClassPrefix ~ 'Tooltip' -%}
{%- set _rootDismissibleClassName = _isDismissible is same as(true) ? _spiritClassPrefix ~ 'Tooltip--dismissible' : null -%}
{%- set _topClassName = _spiritClassPrefix ~ 'Tooltip--top' -%}
{%- set _topStartClassName = _spiritClassPrefix ~ 'Tooltip--topStart' -%}
{%- set _topEndClassName = _spiritClassPrefix ~ 'Tooltip--topEnd' -%}
{%- set _bottomClassName = _spiritClassPrefix ~ 'Tooltip--bottom' -%}
{%- set _bottomStartClassName = _spiritClassPrefix ~ 'Tooltip--bottomStart' -%}
{%- set _bottomEndClassName = _spiritClassPrefix ~ 'Tooltip--bottomEnd' -%}
{%- set _leftClassName = _spiritClassPrefix ~ 'Tooltip--left' -%}
{%- set _leftStartClassName = _spiritClassPrefix ~ 'Tooltip--leftStart' -%}
{%- set _leftEndClassName = _spiritClassPrefix ~ 'Tooltip--leftEnd' -%}
{%- set _rightClassName = _spiritClassPrefix ~ 'Tooltip--right' -%}
{%- set _rightStartClassName = _spiritClassPrefix ~ 'Tooltip--rightStart' -%}
{%- set _rightEndClassName = _spiritClassPrefix ~ 'Tooltip--rightEnd' -%}
{%- set _topLeftClassName = _spiritClassPrefix ~ 'Tooltip--topLeft' -%}
{%- set _topRightClassName = _spiritClassPrefix ~ 'Tooltip--topRight' -%}
{%- set _bottomLeftClassName = _spiritClassPrefix ~ 'Tooltip--bottomLeft' -%}
{%- set _bottomRightClassName = _spiritClassPrefix ~ 'Tooltip--bottomRight' -%}
{%- set _leftTopClassName = _spiritClassPrefix ~ 'Tooltip--leftTop' -%}
{%- set _leftBottomClassName = _spiritClassPrefix ~ 'Tooltip--leftBottom' -%}
{%- set _rightTopClassName = _spiritClassPrefix ~ 'Tooltip--rightTop' -%}
{%- set _rightBottomClassName = _spiritClassPrefix ~ 'Tooltip--rightBottom' -%}

{# Attributes #}
{%- set _idAttr = _id ? 'id="' ~ _id | escape('html_attr') ~ '"' : null -%}
{%- set _ariaControlsAttr = _id ? 'aria-controls="' ~ _id | escape('html_attr') ~ '"' : null -%}
{%- set _dataTargetAttr = _id ? 'data-spirit-target="#' ~ _id | escape('html_attr') ~ '"' : null -%}

{# Miscellaneous #}
{%- set _styleProps = useStyleProps(props) -%}
{%- set _placementClassNames = {
    'top': _topClassName,
    'top-start': _topStartClassName,
    'top-end': _topEndClassName,
    'bottom': _bottomClassName,
    'bottom-start': _bottomStartClassName,
    'bottom-end': _bottomEndClassName,
    'left': _leftClassName,
    'left-start': _leftStartClassName,
    'left-end': _leftEndClassName,
    'right': _rightClassName,
    'right-start': _rightStartClassName,
    'right-end': _rightEndClassName,
    'top-left': _topLeftClassName,
    'top-right': _topRightClassName,
    'bottom-left': _bottomLeftClassName,
    'bottom-right': _bottomRightClassName,
    'left-top': _leftTopClassName,
    'left-bottom': _leftBottomClassName,
    'right-top': _rightTopClassName,
    'right-bottom': _rightBottomClassName,
} -%}
{%- set _classNames = [ _rootClassName, _rootDismissibleClassName, _placementClassNames[_placement], _styleProps.className ] -%}
{%- set _mainPropsWithoutId = props | filter((value, prop) => prop is not same as('id')) -%}

{# Deprecations #}
{% set deprecatedPlacements = {
    'top-left': 'top-start',
    'top-right': 'top-end',
    'right-top': 'right-start',
    'right-bottom': 'right-end',
    'bottom-left': 'bottom-start',
    'bottom-right': 'bottom-end',
    'left-top': 'left-start',
    'left-bottom': 'left-end',
} %}

{% if deprecatedPlacements[_placement] is defined %}
    {% deprecated 'Tooltip: Non-flow-relative values (eg. "' ~ _placement ~ '") in "placement" property are deprecated and will be removed in the next major version. Use flow-relative (eg. "' ~ deprecatedPlacements[_placement] ~ '") instead.' %}
{% endif %}

{% deprecated 'Tooltip: The implementation of this component is deprecated and will be replaced with the implementation of the TooltipPopover in the next major version. Please, use TooltipPopover instead.' %}

<div
    {{ mainProps(_mainPropsWithoutId) }}
    {{ styleProp(_styleProps) }}
    {{ classProp(_classNames) }}
    {{ _idAttr | raw }}
>
    {% block content %}{% endblock %}
    {% if _isDismissible is same as(true) %}
        <button
            type="button"
            class="{{ _closeClassName }}"
            data-spirit-dismiss="tooltip"
            {{ _ariaControlsAttr | raw }}
            {{ _dataTargetAttr | raw }}
            aria-expanded="true"
        >
            <Icon name="close" />
            <VisuallyHidden>{{ _closeLabel }}</VisuallyHidden>
        </button>
    {% endif %}
    <span class="{{ _arrowClassName }}" data-spirit-element="arrow"></span>
</div>
