@use 'sass:map';
@use '@tokens' as tokens;
@use '../../tools/breakpoint';

// Generates grid-gap values for each breakpoint
// Parameters are:
// * $gutters: the gutters map
// * $breakpoints: the breakpoints map
@mixin gutters($gutters, $breakpoints) {
    @each $breakpoint-name, $breakpoint-value in $breakpoints {
        @if not map.has-key($gutters, $breakpoint-name) {
            @error 'Invalid breakpoint specified! #{$breakpoint-name} doesn\'t exist. Use one of #{map.keys($breakpoints)}';
        }
        @include breakpoint.up($breakpoint-value) {
            gap: map.get($gutters, $breakpoint-name);
        }
    }
}

// Generates grid-template-columns values for each breakpoint in equal columns Grid
// Parameters are:
// * $grid-equal-columns: the list of columns to generate
// * $breakpoints: the breakpoints map
@mixin equal-columns($column-count, $breakpoints) {
    @each $breakpoint-name, $breakpoint-value in $breakpoints {
        @include breakpoint.up($breakpoint-value) {
            @each $column in $column-count {
                .Grid--#{breakpoint.get-modifier('infix', $breakpoint-name, $breakpoint-value)}cols-#{$column} {
                    grid-template-columns: repeat(#{$column}, 1fr);
                }
            }
        }
    }
}

// Generates grid-column values for each breakpoint with fallbacks to the previous breakpoint.
// Parameters are:
// * $breakpoints: the breakpoints map
@mixin item($breakpoints) {
    $column-start: initial;
    $column-end: 'initial';
    $row-start: initial;
    $row-end: 'initial';

    @each $breakpoint-name, $breakpoint-value in $breakpoints {
        $suffix: breakpoint.get-modifier('suffix', $breakpoint-name, $breakpoint-value);

        @include breakpoint.up($breakpoint-value) {
            $column-start: var(--grid-item-column-start#{$suffix}, $column-start);
            $column-end: var(--grid-item-column-end#{$suffix}, $column-end);
            $row-start: var(--grid-item-row-start#{$suffix}, $row-start);
            $row-end: var(--grid-item-row-end#{$suffix}, $row-end);

            .GridItem {
                grid-column-start: $column-start;
                grid-column-end: $column-end;
                grid-row-start: $row-start;
                grid-row-end: $row-end;
            }
        }
    }

    :where(.GridItem .GridItem) {
        @each $breakpoint-name, $breakpoint-value in $breakpoints {
            $suffix: breakpoint.get-modifier('suffix', $breakpoint-name, $breakpoint-value);

            --grid-item-column-start#{$suffix}: initial;
            --grid-item-column-end#{$suffix}: initial;
            --grid-item-row-start#{$suffix}: initial;
            --grid-item-row-end#{$suffix}: initial;
        }
    }
}
