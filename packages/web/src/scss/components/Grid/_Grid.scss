@use 'sass:map';
@use '../../tools/breakpoint';
@use '../../tools/reset';
@use '../../tools/string' as spirit-string;
@use 'theme';
@use 'tools';

.Grid {
    display: grid;
    grid-template-columns: repeat(theme.$grid-columns, 1fr);
    width: 100%;

    @include reset.list();
    @include tools.spacings(theme.$grid-spacings, theme.$breakpoints);
}

// stylelint-disable-next-line selector-max-universal -- Let's be bold and reset spacing for all direct descendants regardless of their type to avoid inheritance of spacing for nested Grid.
.Grid > * {
    @each $breakpoint-name, $breakpoint-value in theme.$breakpoints {
        @if $breakpoint-value > 0 {
            --grid-spacing-x-#{$breakpoint-name}: initial;
            --grid-spacing-y-#{$breakpoint-name}: initial;
        } @else {
            --grid-spacing-x: initial;
            --grid-spacing-y: initial;
        }
    }
}

@each $breakpoint-name, $breakpoint-value in theme.$breakpoints {
    $infix: breakpoint.get-modifier('infix', $breakpoint-name, $breakpoint-value);

    @include breakpoint.up($breakpoint-value) {
        @each $alignment-name, $alignment-value in theme.$alignments-x {
            .Grid--#{$infix}#{spirit-string.convert-kebab-case-to-camel-case(alignment-x-#{$alignment-name})} {
                justify-items: $alignment-value;
            }
        }

        @each $alignment-name, $alignment-value in theme.$alignments-y {
            .Grid--#{$infix}#{spirit-string.convert-kebab-case-to-camel-case(alignment-y-#{$alignment-name})} {
                align-items: $alignment-value;
            }
        }
    }
}

@include tools.equal-columns(theme.$grid-equal-columns, theme.$breakpoints);
@include tools.item(theme.$breakpoints);
