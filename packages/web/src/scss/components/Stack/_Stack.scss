@use 'sass:math';
@use '../../tools/breakpoint';
@use 'theme';

.Stack {
    display: grid;
    padding-left: 0;
    margin-block: 0;
    list-style: none;
}

.Stack--hasSpacing {
    // stylelint-disable-next-line custom-property-no-missing-var-function -- We are only building the fallback value here.
    $property-name: --stack-spacing;
    $fallback: theme.$spacing-fallback;

    @each $breakpoint-name, $breakpoint-value in theme.$breakpoints {
        @if $breakpoint-value > 0 {
            // stylelint-disable-next-line custom-property-no-missing-var-function -- We are only building the fallback value here.
            $property-name: --stack-spacing-#{$breakpoint-name};
        }

        @include breakpoint.up($breakpoint-value) {
            --stack-gap: var(#{$property-name}, #{$fallback});
        }

        $fallback: var(#{$property-name}, #{$fallback});
    }

    gap: var(--stack-gap);
}

.Stack--hasSpacing.Stack--hasStartDivider,
.Stack--hasSpacing.Stack--hasEndDivider,
.Stack--hasSpacing.Stack--hasIntermediateDividers {
    gap: 0;
}

// stylelint-disable selector-max-universal -- Let's be bold and tweak all direct descendants regardless of their type.
.Stack > * {
    margin-block: 0;
}

.Stack--hasIntermediateDividers > * {
    border-block-start: theme.$border;
}

.Stack--hasSpacing > * {
    @each $breakpoint-name, $breakpoint-value in theme.$breakpoints {
        @if $breakpoint-value > 0 {
            --stack-spacing-#{$breakpoint-name}: initial;
        } @else {
            --stack-spacing: initial;
        }
    }
}

.Stack--hasSpacing.Stack--hasStartDivider > *,
.Stack--hasSpacing.Stack--hasEndDivider > * {
    padding-block: calc(var(--stack-gap) / 2);
}

.Stack--hasSpacing.Stack--hasIntermediateDividers > * {
    padding-block: var(--stack-gap);
}
// stylelint-enable

.Stack--hasSpacing.Stack--hasStartDivider > :first-child,
.Stack--hasSpacing.Stack--hasEndDivider > :first-child,
.Stack--hasSpacing.Stack--hasIntermediateDividers > :first-child {
    padding-block-start: 0;
}

.Stack--hasSpacing.Stack--hasStartDivider > :last-child,
.Stack--hasSpacing.Stack--hasEndDivider > :last-child,
.Stack--hasSpacing.Stack--hasIntermediateDividers > :last-child {
    padding-block-end: 0;
}

.Stack--hasIntermediateDividers > :first-child {
    border-block-start: none;
}

.Stack--hasStartDivider > :first-child {
    border-block-start: theme.$border;
}

.Stack--hasEndDivider > :last-child {
    border-block-end: theme.$border;
}

.Stack--hasSpacing.Stack--hasStartDivider > :first-child {
    padding-block-start: var(--stack-gap);
}

.Stack--hasSpacing.Stack--hasEndDivider > :last-child {
    padding-block-end: var(--stack-gap);
}
