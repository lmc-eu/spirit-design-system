// 1. Although it seems pointless, having the arrow as a standalone HTML element has a purpose: the arrow can be
//    precisely positioned in sticky tooltips, e.g. with Floating UI:
//    https://floating-ui.com
// 2. `--tooltip-offset-orthogonal` is a custom property to translate orthogonal to the placement axis.
//    It is reset to 0 in the controlled variant when the placement is controlled e.g. by Floating UI.
// 3. Reset positioning for controlled variant when the placement is controlled e.g. by Floating UI.

@use 'sass:math';
@use '../../tools/placement';
@use '../../tools/reset';
@use '../../tools/svg';
@use '../../tools/typography';
@use 'theme';
@use 'tools';

.Tooltip {
    @include placement.child();
    @include typography.generate(theme.$typography);

    width: max-content;
    max-width: theme.$max-width;
    padding: theme.$padding;
    text-align: left;
    white-space: normal;
    word-break: normal;
    color: theme.$color;
    border-radius: theme.$border-radius;
    background-color: theme.$background-color;
    box-shadow: theme.$box-shadow;
    word-wrap: break-word;

    @media (prefers-reduced-motion: no-preference) {
        transition-property: opacity, visibility, transform;
        transition-duration: theme.$transition-duration;
    }
}

// 1.
.Tooltip__arrow {
    position: absolute;
    width: theme.$arrow-width;
    height: theme.$arrow-height;
    background-image: svg.escape(theme.$arrow-shape);
    transform-origin: center bottom;
}

.Tooltip__close {
    @include reset.button();

    width: theme.$close-button-size;
    height: theme.$close-button-size;
    color: theme.$color;
}

.Tooltip--dismissible {
    display: grid;
    grid-template-columns: 1fr auto;
    column-gap: theme.$gap;
    align-items: center;
    max-width: calc(#{theme.$max-width} + #{theme.$gap} + #{theme.$close-button-size});
}

// Sides
.Tooltip--top {
    @include placement.variant('top', $offset: theme.$arrow-height, $scale: var(--tooltip-scale, 1));
}

.Tooltip--bottom {
    @include placement.variant('bottom', $offset: theme.$arrow-height, $scale: var(--tooltip-scale, 1));
}

.Tooltip--left {
    @include placement.variant('left', $offset: theme.$arrow-height, $scale: var(--tooltip-scale, 1));
}

.Tooltip--right {
    @include placement.variant('right', $offset: theme.$arrow-height, $scale: var(--tooltip-scale, 1));
}

// Arrows
.Tooltip--top > .Tooltip__arrow {
    @include placement.arrow('top');
}

.Tooltip--bottom > .Tooltip__arrow {
    @include placement.arrow('bottom');
}

.Tooltip--left > .Tooltip__arrow {
    @include placement.arrow('left');
}

.Tooltip--right > .Tooltip__arrow {
    @include placement.arrow('right');
}

// Controlled visibility
.Tooltip.is-hidden {
    @extend %hidden;
}

.Tooltip.is-visible {
    @extend %visible;
}

// Controlled placement
.Tooltip[data-spirit-placement] {
    --tooltip-offset-orthogonal: 0; // 2.

    inset: unset; // 3.
}

// Use @extend for controlled placement (of both tooltip and arrow) to avoid specificity issues
// stylelint-disable scss/at-extend-no-missing-placeholder -- We know what we are doing here. (Do we?)
.Tooltip[data-spirit-placement='top'] {
    @extend .Tooltip--top;
}

.Tooltip[data-spirit-placement='bottom'] {
    @extend .Tooltip--bottom;
}

.Tooltip[data-spirit-placement='left'] {
    @extend .Tooltip--left;
}

.Tooltip[data-spirit-placement='right'] {
    @extend .Tooltip--right;
}
