// 1. In order to be transitioned, the visibility of the dialog is controlled through `opacity` and `visibility`
//    properties instead of the default `display`.
// 2. Use a `::before` pseudo-element instead of `::backdrop` to make fading possible.
// 3. Clip overflow during transition on mobile screens.
// 4. Intentionally transition also the worse performing properties to smooth out the changes of viewport size around
//    the tablet breakpoint.

@use 'sass:map';
@use '../../tools/accessibility';
@use '../../tools/breakpoint';
@use '../../tools/svg';
@use '../../tools/typography';
@use 'theme';

// @deprecated Will be removed in next major version.
.Modal {
    position: fixed;
    top: 0;
    z-index: 1;
    width: 100%;
    max-width: none;
    height: 100%;
    max-height: none;
    padding: 0;
    margin: 0;
    overflow-x: hidden;
    overflow-y: auto;
    border: 0;
    background: transparent;
    overscroll-behavior-y: contain;
}

// @deprecated Will be removed in next major version.
.Modal::backdrop {
    background-color: theme.$backdrop-background-color;
    visibility: visible;
    opacity: 1;
}

// @deprecated Will be removed in next major version.
.Modal__content {
    display: flex;
    align-items: center;
    width: auto;
    max-width: 100%;
    min-height: calc(100% - #{theme.$padding * 2});
    margin: theme.$padding;
    pointer-events: none;

    @include breakpoint.up(map.get(theme.$breakpoints, tablet)) {
        max-width: theme.$dialog-width-tablet;
        min-height: calc(100% - #{theme.$padding-tablet * 2});
        margin: theme.$padding-tablet auto;
    }

    @include breakpoint.up(map.get(theme.$breakpoints, desktop)) {
        max-width: theme.$dialog-width-desktop;
    }
}

// @deprecated Will be removed in next major version.
.Modal__dialog {
    @include typography.generate(theme.$typography);

    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    padding: theme.$content-padding;
    color: theme.$content-text-color;
    border-radius: theme.$content-border-radius;
    background-color: theme.$content-background-color;
    box-shadow: theme.$content-shadow;
    pointer-events: auto;

    @include breakpoint.up(map.get(theme.$breakpoints, tablet)) {
        padding: theme.$content-padding-tablet;
    }
}

// @deprecated Will be removed in next major version.
// Migration: Rename to `Modal`.
.Modal--composed {
    --modal-scale: #{theme.$transition-scale-ratio};
    --modal-translate-x: -50%;
    --modal-translate-y: #{theme.$transition-shift-distance};

    all: unset;
    position: fixed;
    inset: 0;
    z-index: 1;
    display: flex; // 1.
    overflow: hidden; // 3.
    visibility: hidden; // 1.
    opacity: 0; // 1.

    // 2.
    &::backdrop {
        background-color: transparent;
    }

    // 2.
    &::before {
        content: '';
        position: fixed;
        inset: 0;
        z-index: -2;
        background-color: theme.$backdrop-background-color;
        visibility: hidden;
        opacity: 0;
    }

    @include breakpoint.up(map.get(theme.$breakpoints, tablet)) {
        --modal-translate-y: 50%;
    }

    @media (prefers-reduced-motion: no-preference) {
        transition-property: visibility, opacity;
        transition-duration: theme.$transition-duration;
        will-change: visibility, opacity;

        // 2.
        &::before {
            transition: inherit;
        }
    }
}

// @deprecated Will be removed in next major version.
// Migration:
// 1. Remove the `Modal--composed` modifier.
// 2. Remove the `padding: 0` override.
.Modal--composed .Modal__dialog {
    @include typography.generate(theme.$typography);

    position: fixed;
    bottom: 0;
    left: 50%;
    display: flex;
    flex-direction: column;
    width: theme.$dialog-width;
    height: theme.$dialog-max-height;
    padding: 0;
    overflow-x: hidden;
    overflow-y: auto;
    color: theme.$dialog-text-color;
    border-radius: theme.$dialog-border-radius theme.$dialog-border-radius 0 0;
    background-color: theme.$dialog-background-color;
    box-shadow: theme.$dialog-shadow;
    transform: translate(var(--modal-translate-x), var(--modal-translate-y)) scale(var(--modal-scale));
    transform-origin: bottom center;
    overscroll-behavior: contain;

    @include breakpoint.up(map.get(theme.$breakpoints, tablet)) {
        bottom: 50%;
        width: theme.$dialog-width-tablet;
        max-width: calc(100% - #{theme.$padding-x-tablet});
        height: theme.$dialog-height-tablet;
        max-height: theme.$dialog-max-height-tablet;
        border-radius: theme.$dialog-border-radius;
        transform-origin: center center;
    }

    @include breakpoint.up(map.get(theme.$breakpoints, desktop)) {
        width: theme.$dialog-width-desktop;
    }

    @media (prefers-reduced-motion: no-preference) {
        transition-property: bottom, width, border-radius, transform; // 4.
        transition-duration: inherit;
    }
}

// @deprecated Will be removed in next major version.
// Migration: Rename to `Modal`.
.Modal--composed[open] {
    --modal-scale: 1;
    --modal-translate-y: 0;

    visibility: visible;
    opacity: 1;

    // 2.
    &::before {
        visibility: visible;
        opacity: 1;
    }

    @include breakpoint.up(map.get(theme.$breakpoints, tablet)) {
        --modal-translate-y: 50%;
    }
}

.Modal--expandOnMobile .Modal__dialog {
    height: theme.$dialog-height;
    max-height: theme.$dialog-max-height;

    @include breakpoint.up(map.get(theme.$breakpoints, tablet)) {
        max-height: theme.$dialog-max-height-tablet;
    }
}

// @deprecated Will be removed in next major version.
.Modal__header {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    margin-bottom: theme.$header-spacing-deprecated;
}

// @deprecated Will be removed in next major version.
.Modal__footer {
    display: flex;
    gap: theme.$footer-gap-deprecated;
    align-items: center;
    justify-content: flex-end;
    margin-top: theme.$footer-spacing-deprecated;
}

// @deprecated Will be removed in next major version.
.Modal__close {
    position: absolute;
    top: calc(#{theme.$content-padding} / 2);
    right: calc(#{theme.$content-padding} / 2);
}
