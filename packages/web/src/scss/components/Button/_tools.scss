@use 'sass:map';
@use '@tokens' as tokens;
@use '../../settings/cursors';
@use '../../tools/breakpoint';

@mixin square($breakpoints, $typography, $padding-y, $border-width) {
    @each $breakpoint-name, $breakpoint-value in $breakpoints {
        @if map.has-key($typography, $breakpoint-name, line-height) {
            @include breakpoint.up($breakpoint-value) {
                width: calc(
                    (1em * #{map.get($typography, $breakpoint-name, line-height)}) + (#{$padding-y} * 2) +
                        (#{$border-width} * 2)
                );
            }
        }
    }
}

@mixin variant($variant, $variables) {
    .Button--#{$variant} {
        color: map.get($variables, default-color);
        border-color: map.get($variables, default-border-color);
        background-color: map.get($variables, default-background);

        &:hover,
        &:focus {
            color: map.get($variables, hover-color);
            border-color: map.get($variables, hover-border-color);
            background-color: map.get($variables, hover-background);
        }

        &:active {
            color: map.get($variables, active-color);
            border-color: map.get($variables, active-border-color);
            background-color: map.get($variables, active-background);
        }

        &:disabled,
        &.is-disabled,
        &.Button--disabled {
            color: map.get($variables, disabled-color);
            border-color: map.get($variables, disabled-border-color);
            background-color: map.get($variables, disabled-background);
            pointer-events: none;
            cursor: cursors.$disabled;
        }
    }
}

@mixin size($size, $variables) {
    .Button--#{$size} {
        padding: map.get($variables, padding-y) map.get($variables, padding-x);
    }
}
