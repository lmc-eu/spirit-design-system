@use 'sass:map';
@use 'theme';
@use 'tools';
@use '../../settings/cursors';
@use '../../tools/dictionaries';
@use '../../tools/typography';

.Button {
    @include typography.generate(theme.$typography);

    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    border-width: theme.$border-width;
    border-style: theme.$border-style;
    border-radius: theme.$border-radius;
    user-select: none;
    cursor: cursors.$button-links;

    &:hover,
    &:focus {
        text-decoration: none;
    }

    &:disabled,
    &.is-disabled,
    &.Button--disabled {
        pointer-events: none;
        cursor: cursors.$disabled;
    }
}

@include dictionaries.generate-colors(
    'Button',
    theme.$color-dictionary,
    theme.$color-dictionary-config,
    theme.$color-dictionary-states,
    theme.$color-dictionary-overrides
);

@include dictionaries.generate-sizes('Button', theme.$sizes);

.Button--block {
    display: block;
    width: 100%;
}

.Button--square {
    @include tools.square(
        theme.$breakpoints,
        theme.$typography,
        map.get(theme.$sizes, medium, padding-y),
        theme.$border-width
    );

    flex: none;
    padding-inline: 0;
}

.Button--square.Button--small {
    @include tools.square(
        theme.$breakpoints,
        theme.$typography,
        map.get(theme.$sizes, small, padding-y),
        theme.$border-width
    );
}

.Button--square.Button--large {
    @include tools.square(
        theme.$breakpoints,
        theme.$typography,
        map.get(theme.$sizes, large, padding-y),
        theme.$border-width
    );
}

.Button--loading {
    position: relative;
    color: transparent;

    &:hover,
    &:active,
    &:focus {
        color: transparent;
    }
}

.Button--loading > svg:last-child {
    --animation-spin-translate: -50%, -50%;

    position: absolute;
    top: 50%;
    left: 50%;
    color: var(--button-color);
    transform: translate(-50%, -50%);
}
