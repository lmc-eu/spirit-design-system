// 1. We want specific typography for nested items in the Navigation component.
// 2. In the vertical Navigation component, the stripe is placed outside the NavigationAction element,
//    so we need to disable pointer events on it.
// 3. We want the selected and expanded states to override the hover and active states.

@use '@tokens' as tokens;
@use '../../tools/dictionaries';
@use '../../tools/reset';
@use '../../tools/typography';
@use 'theme';

.NavigationAction:where(button) {
    @include reset.button();
}

.NavigationAction {
    position: relative;
    display: flex;
    gap: theme.$action-gap;
    align-items: center;
    padding: var(--#{tokens.$css-variable-prefix}navigation-action-padding-y)
        var(--#{tokens.$css-variable-prefix}navigation-action-padding-x);
    color: theme.$action-color-state-default;
    border-radius: var(--#{tokens.$css-variable-prefix}navigation-action-border-radius);
    background-color: theme.$action-background-color-state-default;

    @media (hover: hover) {
        &:hover {
            text-decoration: none;
            color: theme.$action-color-state-hover;
            background-color: theme.$action-background-color-state-hover;
        }
    }

    &:active {
        text-decoration: none;
        color: theme.$action-color-state-active;
        background-color: theme.$action-background-color-state-active;
    }
}

.NavigationAction--box::after {
    content: '';
    position: absolute;
    background-color: theme.$action-stripe-background-color-state-default;
}

.Navigation--horizontal {
    @include dictionaries.generate-variants(
        $class-name: 'NavigationAction',
        $dictionary-values: theme.$action-shape-variant-dictionary,
        $config: theme.$horizontal-action-shape-variant-config
    );
}

.Navigation--vertical {
    @include dictionaries.generate-variants(
        $class-name: 'NavigationAction',
        $dictionary-values: theme.$action-shape-variant-dictionary,
        $config: theme.$vertical-action-shape-variant-config
    );
}

// stylelint-disable-next-line selector-max-compound-selectors, selector-max-specificity -- 1.
.Navigation--vertical
    > ul
    ul
    .NavigationAction:not(:is(.NavigationAction--selected, .NavigationAction[aria-expanded='true'])) {
    @include typography.generate(theme.$vertical-action-typography-nested);
}

.NavigationAction--selected,
.NavigationAction[aria-expanded='true'] {
    color: theme.$action-color-state-selected;
    background-color: theme.$action-background-color-state-selected;
}

.NavigationAction--selected.NavigationAction--box::after {
    background-color: theme.$action-stripe-background-color-selected-state-default;
}

.NavigationAction--disabled {
    color: theme.$action-color-state-disabled;
    pointer-events: none;
}

.Navigation--horizontal .NavigationAction {
    @include typography.generate(theme.$horizontal-action-typography);

    justify-content: center;
}

.Navigation--horizontal .NavigationAction--box::after {
    inset-inline: 0;
    bottom: 0;
    height: theme.$horizontal-action-stripe-size;
}

.Navigation--vertical .NavigationAction {
    @include typography.generate(theme.$vertical-action-typography);

    justify-content: space-between;

    &::after {
        inset-block: 0;
        left: calc(-1 * #{theme.$vertical-item-padding-x});
        width: theme.$vertical-action-stripe-size;
        pointer-events: none; // 2.
    }
}

.Navigation--horizontal .NavigationAction--box:hover::after {
    @media (hover: hover) {
        background-color: theme.$horizontal-action-stripe-background-color-state-hover;
    }
}

.Navigation--horizontal .NavigationAction--box:active::after {
    background-color: theme.$horizontal-action-stripe-background-color-state-active;
}

// stylelint-disable selector-max-specificity, selector-max-class -- 3.
.Navigation--horizontal .NavigationAction--box.NavigationAction--selected {
    @media (hover: hover) {
        &:hover::after {
            background-color: theme.$action-stripe-background-color-selected-state-hover;
        }
    }

    &:active::after {
        background-color: theme.$action-stripe-background-color-selected-state-active;
    }
}
// stylelint-enable selector-max-specificity, selector-max-class
