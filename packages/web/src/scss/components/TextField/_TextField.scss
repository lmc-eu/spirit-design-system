// 1. Enable redesigned disabled state of the component using `spirit-v1-box-field-disabled` on the root element, eg. body.
//    This will be removed in v1 and the new disabled state will be the default.

@use '../../settings/cursors';
@use '../../theme/form-fields' as form-fields-theme;
@use '../../tools/form-fields' as form-fields-tools;
@use '../../tools/reset';
@use 'theme';

$_field-name: 'TextField';

.TextField {
    @include form-fields-tools.box-field-root();
}

.TextField__label {
    @include form-fields-tools.box-field-label();
}

.TextField__label--hidden {
    @include form-fields-tools.label-hidden();
}

.TextField__label--required::after {
    @include form-fields-tools.label-required();
}

.TextField__input {
    @include form-fields-tools.box-field-input();

    &[type='email'],
    &[type='number'],
    &[type='password'],
    &[type='search'],
    &[type='tel'],
    &[type='text'],
    &[type='url'] {
        appearance: none;
    }

    &[type='number'] {
        --arrows-width: #{theme.$input-number-arrows-width};
    }

    &[size] {
        width: calc(
            var(--width) + 2 * #{form-fields-theme.$box-field-input-padding-x} + 2 * #{form-fields-theme.$box-field-input-border-width} +
                var(--arrows-width, 0px)
        );
    }

    @each $size in theme.$input-size-characters {
        &[size='#{$size}'] {
            --width: #{$size}ch;
        }
    }
}

.TextField--fluid {
    @include form-fields-tools.box-field-fluid();
}

.TextField__passwordToggle {
    position: relative;
    display: flex;
}

.TextField__passwordToggle > .TextField__input {
    flex-grow: 1;
    padding-right: 0;
    border-color: transparent;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

// We position the button next to the input and use pseudo-element for border styling.
// We do this because password managers place their icon buttons inside the password input.
.TextField__passwordToggle__button {
    @include reset.button();

    display: flex;
    align-items: center;
    justify-content: center;
    padding: theme.$input-password-toggle-padding;
    color: form-fields-theme.$box-field-input-color-default;
    border-radius: 0 form-fields-theme.$box-field-input-border-radius form-fields-theme.$box-field-input-border-radius 0;
    background-color: form-fields-theme.$box-field-input-background;

    &::before {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        border: form-fields-theme.$box-field-input-border-width form-fields-theme.$box-field-input-border-style
            form-fields-theme.$box-field-input-border-color-default;
        border-radius: form-fields-theme.$box-field-input-border-radius;
        pointer-events: none;
    }
}

.TextField__passwordToggle__icon {
    pointer-events: none;
}

.TextField__passwordToggle__icon--hidden,
.TextField__passwordToggle__button[aria-pressed='true'] > .TextField__passwordToggle__icon--shown {
    display: block;
}

// stylelint-disable-next-line no-descending-specificity -- In this case ↕️, the code is more readable this way.
.TextField__passwordToggle__icon--shown,
.TextField__passwordToggle__button[aria-pressed='true'] > .TextField__passwordToggle__icon--hidden {
    display: none;
}

// stylelint-disable selector-max-specificity, selector-max-class, selector-max-compound-selectors -- We need high-specificity selectors here.
.TextField > .TextField__input:focus-visible,
.TextField > .TextField__passwordToggle > .TextField__input:focus-visible ~ .TextField__passwordToggle__button::before {
    @include form-fields-tools.box-field-focus-visible();
}
// stylelint-enable selector-max-specificity, selector-max-class, selector-max-compound-selectors

.TextField__passwordToggle > .TextField__input:focus-visible,
.TextField__passwordToggle__button:focus-visible {
    outline: 0;
}

.TextField__passwordToggle__button:focus-visible::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    z-index: 1;
    width: (2 * theme.$input-password-toggle-padding) + theme.$input-password-toggle-icon-size;
    height: 100%;
    border-radius: form-fields-theme.$box-field-input-border-radius;
    box-shadow: form-fields-theme.$input-focus-shadow;
}

.TextField__message,
.TextField > [data-element='validator_message'] {
    @include form-fields-tools.message();
}

.TextField__helperText {
    @include form-fields-tools.helper-text();
}

@include form-fields-tools.input-field-validation-states($_field-name);

.TextField--disabled > .TextField__label {
    @include form-fields-tools.label-disabled();
}

.TextField .TextField__input:disabled,
:is(.TextField--disabled, .TextField.is-disabled) .TextField__input {
    @include form-fields-tools.box-field-disabled-input();
}

// 1.
// stylelint-disable selector-max-class -- we need to add a feature class
.spirit-v1-box-field-disabled .TextField .TextField__input:disabled,
.spirit-v1-box-field-disabled :is(.TextField--disabled, .TextField.is-disabled) .TextField__input {
    @include form-fields-tools.box-field-disabled-input-v1();
}
// stylelint-enable

// stylelint-disable no-descending-specificity, selector-max-specificity, selector-max-class, selector-max-compound-selectors
// -- The code is more comprehensible when styling elements in this order:
//      1. input (with a pseudo-element),
//      2. password toggle button,
//      3. message.
//    Also, high-specificity selectors are necessary to achieve the desired result.
.TextField > .TextField__input:disabled,
:is(.TextField--disabled, .TextField.is-disabled) > .TextField__input,
.TextField .TextField__passwordToggle .TextField__input:disabled ~ .TextField__passwordToggle__button::before,
:is(.TextField--disabled, .TextField.is-disabled)
    .TextField__passwordToggle
    .TextField__passwordToggle__button::before {
    border-color: theme.$input-border-color-disabled;
}

.TextField .TextField__input:disabled ~ .TextField__passwordToggle__button,
:is(.TextField--disabled, .TextField.is-disabled) .TextField__passwordToggle__button {
    @include form-fields-tools.input-disabled();

    pointer-events: none;
    cursor: cursors.$disabled;
}

// 1.
.spirit-v1-box-field-disabled .TextField .TextField__input:disabled ~ .TextField__passwordToggle__button,
.spirit-v1-box-field-disabled :is(.TextField--disabled, .TextField.is-disabled) .TextField__passwordToggle__button {
    background-color: form-fields-theme.$box-field-input-background-disabled;
}
// stylelint-enable

:is(.TextField--disabled, .TextField.is-disabled) > :is(.TextField__message, [data-element='validator_message']) {
    @include form-fields-tools.message-disabled();
}

:is(.TextField--disabled, .TextField.is-disabled) > :is(.TextField__helperText) {
    @include form-fields-tools.helper-text-disabled();
}
