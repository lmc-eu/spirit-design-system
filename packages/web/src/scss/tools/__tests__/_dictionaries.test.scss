@use 'true' as test;
@use '../../settings/dictionaries' as dictionaries-settings;
@use '../dictionaries';
@use '@tokens' as tokens;

@include test.describe('generate-colors mixin') {
    @include test.it('should generate correct color classes based on a dictionary') {
        @include test.assert() {
            @include test.output() {
                @include dictionaries.generate-colors(
                    $class-name: 'Test',
                    $dictionary-values: (
                        'primary',
                    ),
                    $config: (
                        color: 'default',
                    )
                );
            }

            @include test.expect() {
                .Test--primary {
                    --test-color: #29616f;

                    color: var(--test-color);
                }
            }
        }
    }

    @include test.it('should generate correct color classes and data attributes based on a dictionary') {
        @include test.assert() {
            @include test.output() {
                @include dictionaries.generate-colors(
                    $class-name: 'Test',
                    $dictionary-values: (
                        'primary',
                    ),
                    $config: (
                        color: 'default',
                    ),
                    $child-selector: ' > .Test__box',
                    $generate-data-attribute: true
                );
            }

            @include test.expect() {
                .Test--primary > .Test__box,
                .Test[data-spirit-color='primary'] > .Test__box {
                    --test-color: #29616f;

                    color: var(--test-color);
                }
            }
        }
    }
}

@include test.describe('generate-link-colors mixin') {
    @include test.it('should generate correct link color classes based on a dictionary') {
        @include test.assert() {
            @include test.output() {
                @include dictionaries.generate-link-colors(
                    '.link',
                    dictionaries-settings.$action-link-colors,
                    tokens.$action-colors,
                    (default, hover, active, disabled)
                );
            }

            @include test.expect() {
                .link-primary {
                    color: #29616f;
                }

                .link-primary:hover {
                    color: #1b5260;
                }

                .link-primary:active {
                    color: #0b3a46;
                }

                .link-primary.link-disabled {
                    color: #c4c4c4;
                }

                .link-secondary {
                    color: #90a2a7;
                }

                .link-secondary:hover {
                    color: #849499;
                }

                .link-secondary:active {
                    color: #6e7b80;
                }

                .link-secondary.link-disabled {
                    color: #c4c4c4;
                }

                .link-inverted {
                    color: #e9e9e9;
                }

                .link-inverted:hover {
                    color: #dbdbdb;
                }

                .link-inverted:active {
                    color: #d4d4d4;
                }

                .link-inverted.link-disabled {
                    color: #c4c4c4;
                }
            }
        }
    }
}

@include test.describe('generate-placements mixin') {
    @include test.it('should generate correct placement classes based on a dictionary') {
        @include test.assert() {
            @include test.output() {
                @include dictionaries.generate-placements('Test', ('top-left'));
            }

            @include test.expect() {
                .Test[data-spirit-placement='top-left'],
                .Test--topLeft {
                    --test-offset: 0;

                    inset: auto auto 100% 0;
                    translate: var(--test-offset-orthogonal, 0) calc(-1 * var(--test-offset, 0));
                    transform-origin: bottom right;
                }
            }
        }

        @include test.assert() {
            @include test.output() {
                @include dictionaries.generate-placements('Test', ('top-start'));
            }

            @include test.expect() {
                .Test[data-spirit-placement='top-start'],
                .Test--topStart {
                    --test-offset: 0;

                    inset: auto auto 100% 0;
                    translate: var(--test-offset-orthogonal, 0) calc(-1 * var(--test-offset, 0));
                    transform-origin: bottom;
                }
            }
        }
    }
}

@include test.describe('generate-controlled-placements mixin') {
    @include test.it('should generate correct controlled placement classes based on a dictionary') {
        @include test.assert() {
            @include test.output() {
                @include dictionaries.generate-controlled-placements(
                    'Test',
                    ('top-left', 'bottom-right'),
                    'data-placement'
                );
            }

            @include test.expect() {
                // stylelint-disable scss/at-extend-no-missing-placeholder -- We are extending classes created by generate-placements().
                .Test[data-placement='topLeft'] {
                    @extend .Test--topLeft !optional;
                }

                .Test[data-placement='bottomRight'] {
                    @extend .Test--bottomRight !optional;
                }
                // stylelint-enable scss/at-extend-no-missing-placeholder
            }
        }
    }
}

@include test.describe('generate-sizes mixin') {
    @include test.it('should generate correct size classes based on a config') {
        @include test.assert() {
            @include test.output() {
                @include dictionaries.generate-sizes(
                    'TestSize',
                    (
                        large: (
                            padding-y: 12px,
                            padding-x: 16px,
                        ),
                    )
                );
            }

            @include test.expect() {
                .TestSize--large {
                    padding: 12px 16px;
                }
            }
        }
    }
}
