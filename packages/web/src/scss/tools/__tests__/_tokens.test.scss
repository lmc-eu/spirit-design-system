@use 'true' as test;
@use '@tokens' as tokens;
@use '../tokens' as tokens-tools;

$test-theme: (
    action: (
        button: (
            active: #fff,
        ),
    ),
);

@include test.describe('format-numeric-key function') {
    @include test.it('should format a single-digit numeric key') {
        @include test.assert-equal(tokens-tools.format-numeric-key(1), '01');
    }

    @include test.it('should return a two-digit numeric key unchanged') {
        @include test.assert-equal(tokens-tools.format-numeric-key(22), 22);
    }
}

@include test.describe('generate-css-variables mixin') {
    @include test.it('should generate CSS variables based on the provided map') {
        @include test.assert() {
            @include test.output() {
                :root {
                    @include tokens-tools.generate-css-variables($map: $test-theme, $prefix: 'test');
                }
            }

            @include test.expect() {
                :root {
                    --test-action-button-active: #fff;
                }
            }
        }
    }
}

@include test.describe('get-variable-if-exists function') {
    @include test.it('should return the variable that exists in the tokens') {
        // ⚠️ External dependency: touches actual design token values.
        @include test.assert-equal(
            tokens-tools.get-variable-if-exists('container-small-max-width', tokens.$container-max-width),
            tokens.$container-small-max-width
        );
    }

    @include test.it('should return the fallback variable') {
        @include test.assert-equal(tokens-tools.get-variable-if-exists('new-variable', '0px'), '0px');
    }
}

@include test.describe('generate-responsive-map function') {
    // ⚠️ External dependency: outputs actual design token values.
    @include test.it('should return a map with responsive values for given arguments') {
        $result: tokens-tools.generate-responsive-map(
            $property: 'border-radius',
            $size: 'medium',
            $variable-prefix: 'form-field',
            $token-name: 'radius',
            $fallback: 4px,
        );

        $expected: (
            'border-radius-mobile': 8px,
            'border-radius-tablet': 8px,
            'border-radius-desktop': 8px,
        );

        @include test.assert-equal($result, $expected);
    }

    @include test.it('should return a map with fallback values for given arguments') {
        $result: tokens-tools.generate-responsive-map(
            $property: 'border-radius',
            $size: 'medium',
            $variable-prefix: 'form-field',
            $token-name: 'TEST',
            $fallback: 4px,
        );

        $expected: (
            'border-radius-mobile': 4px,
            'border-radius-tablet': 4px,
            'border-radius-desktop': 4px,
        );

        @include test.assert-equal($result, $expected);
    }
}
