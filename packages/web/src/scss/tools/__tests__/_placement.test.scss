// stylelint-disable scss/at-mixin-argumentless-call-parentheses -- We need to allow this to make sass-true work
@use 'true';
@use '../placement';

@include true.describe('placement functions and mixins') {
    @include true.it('should return correct cross axis direction') {
        @include true.assert {
            @include true.output {
                --cross-axis-direction-left: #{placement.get-cross-axis-direction('left')};
                --cross-axis-direction-bottom: #{placement.get-cross-axis-direction('bottom')};
            }
            @include true.expect {
                --cross-axis-direction-left: vertical;
                --cross-axis-direction-bottom: horizontal;
            }
        }
    }

    @include true.it('should return true for logical placements, false otherwise') {
        @include true.assert {
            @include true.output {
                --is-logical-left: #{placement.is-logical('left')};
                --is-logical-start: #{placement.is-logical('start')};
            }
            @include true.expect {
                --is-logical-left: false;
                --is-logical-start: true;
            }
        }
    }

    @include true.it('should return correct physical placement') {
        @include true.assert {
            @include true.output {
                --logical-to-physical-start-horizontal: #{placement.translate-logical-to-physical('start', 'horizontal')};
                --logical-to-physical-start-vertical: #{placement.translate-logical-to-physical('start', 'vertical')};
            }
            @include true.expect {
                --logical-to-physical-start-horizontal: left;
                --logical-to-physical-start-vertical: top;
            }
        }
    }

    @include true.it('should return transformed axis') {
        @include true.assert {
            @include true.output {
                --transform-axis-left: #{placement.transform-axis('left')};
                --transform-axis-left-inverse: #{placement.transform-axis('left', $inverse: true)};
                --transform-axis-left-physical: #{placement.transform-axis('left', $physical-direction: 'horizontal')};
                --transform-axis-left-physical-inverse: #{placement.transform-axis(
                        'left',
                        $inverse: true,
                        $physical-direction: 'horizontal'
                    )};
                --transform-axis-start: #{placement.transform-axis('start')};
                --transform-axis-start-inverse: #{placement.transform-axis('start', $inverse: true)};
                --transform-axis-start-physical: #{placement.transform-axis('start', $physical-direction: 'horizontal')};
                --transform-axis-start-physical-inverse: #{placement.transform-axis(
                        'start',
                        $inverse: true,
                        $physical-direction: 'horizontal'
                    )};
            }
            @include true.expect {
                --transform-axis-left: left;
                --transform-axis-left-inverse: right;
                --transform-axis-left-physical: left;
                --transform-axis-left-physical-inverse: right;
                --transform-axis-start: start;
                --transform-axis-start-inverse: end;
                --transform-axis-start-physical: left;
                --transform-axis-start-physical-inverse: right;
            }
        }
    }

    @include true.describe('should return transformed placement') {
        @include true.it('physical only') {
            @include true.assert {
                @include true.output {
                    --transform-left: #{placement.transform('left')};
                    --transform-left-top: #{placement.transform('left-top')};
                    --transform-left-top-main-axis-inverse: #{placement.transform('left-top', $main-axis-inverse: true)};
                    --transform-left-top-main-axis-inverse-cross-axis-inverse: #{placement.transform(
                            'left-top',
                            $main-axis-inverse: true,
                            $cross-axis-inverse: true
                        )};
                    --transform-left-top-main-axis-inverse-cross-axis-inverse-physical: #{placement.transform(
                            'left-top',
                            $main-axis-inverse: true,
                            $cross-axis-inverse: true,
                            $cross-axis-physical: true
                        )};
                    --transform-left-top-spaces: #{placement.transform('left-top', $join-with: ' ')};
                }
                @include true.expect {
                    --transform-left: left;
                    --transform-left-top: left-top;
                    --transform-left-top-main-axis-inverse: right-top;
                    --transform-left-top-main-axis-inverse-cross-axis-inverse: right-bottom;
                    --transform-left-top-main-axis-inverse-cross-axis-inverse-physical: right-bottom;
                    --transform-left-top-spaces: left top;
                }
            }
        }

        @include true.it('physical and logical') {
            @include true.assert {
                @include true.output {
                    --transform-top-start: #{placement.transform('top-start')};
                    --transform-top-start-main-axis-inverse: #{placement.transform(
                            'top-start',
                            $main-axis-inverse: true
                        )};
                    --transform-top-start-main-axis-inverse-cross-axis-inverse: #{placement.transform(
                            'top-start',
                            $main-axis-inverse: true,
                            $cross-axis-inverse: true
                        )};
                    --transform-top-start-main-axis-inverse-cross-axis-physical: #{placement.transform(
                            'top-start',
                            $main-axis-inverse: true,
                            $cross-axis-physical: true
                        )};
                    --transform-top-start-main-axis-inverse-cross-axis-inverse-physical: #{placement.transform(
                            'top-start',
                            $main-axis-inverse: true,
                            $cross-axis-inverse: true,
                            $cross-axis-physical: true
                        )};
                    --transform-top-start-spaces: #{placement.transform('top-start', $join-with: ' ')};
                }
                @include true.expect {
                    --transform-top-start: top-start;
                    --transform-top-start-main-axis-inverse: bottom-start;
                    --transform-top-start-main-axis-inverse-cross-axis-inverse: bottom-end;
                    --transform-top-start-main-axis-inverse-cross-axis-physical: bottom-left;
                    --transform-top-start-main-axis-inverse-cross-axis-inverse-physical: bottom-right;
                    --transform-top-start-spaces: top start;
                }
            }
        }
    }

    @include true.it('should apply relative positioning to parent') {
        @include true.assert {
            @include true.output {
                .parent-test {
                    @include placement.parent();
                }
            }
            @include true.expect {
                .parent-test {
                    position: relative;
                }
            }
        }
    }

    @include true.it('should apply absolute positioning to child with z-index') {
        @include true.assert {
            @include true.output {
                .child-test {
                    @include placement.child(3);
                }
            }
            @include true.expect {
                .child-test {
                    position: absolute;
                    z-index: 3;
                }
            }
        }
    }

    @include true.it('should apply custom styles to child variant') {
        @include true.assert {
            @include true.output {
                .child-variant-test {
                    @include placement.child-variant('test', 'top', 10px);
                }
            }
            @include true.expect {
                .child-variant-test {
                    --test-offset: 10px;

                    inset: auto auto 100% 50%;
                    translate: var(--test-offset-orthogonal, -50%) calc(-1 * var(--test-offset, 0));
                    transform-origin: bottom;
                }
            }
        }
    }

    @include true.it('should apply controlled styles to child') {
        @include true.assert {
            @include true.output {
                .child-controlled-test {
                    @include placement.child-controlled('test', 10px);
                }
            }
            @include true.expect {
                .child-controlled-test {
                    --test-offset-orthogonal: 0;
                    --test-offset: 10px;

                    inset: unset;
                    translate: unset;
                }
            }
        }
    }

    @include true.it('should apply styles to arrow') {
        @include true.assert {
            @include true.output {
                .arrow-test {
                    @include placement.arrow('test', '10px', '10px', '5px');
                }
            }
            @include true.expect {
                .arrow-test {
                    --test-arrow-width: 10px;
                    --test-arrow-height: 10px;
                    --test-arrow-corner-offset: 5px;

                    position: absolute;
                    transform-origin: bottom center;
                }
            }
        }
    }

    @include true.it('should apply variant styles to arrow') {
        @include true.assert {
            @include true.output {
                .arrow-variant-test {
                    @include placement.arrow-variant('test', 'top');
                }
            }
            @include true.expect {
                .arrow-variant-test {
                    inset: auto auto 100% 50%;
                    translate: -50% 0%;
                    rotate: z 0deg;
                }
            }
        }
    }

    @include true.it('should apply controlled styles to arrow') {
        @include true.assert {
            @include true.output {
                .arrow-controlled-test {
                    @include placement.arrow-controlled();
                }
            }

            @include true.expect {
                .arrow-controlled-test {
                    inset: unset;
                    translate: unset;
                    transform-origin: center;
                }
            }
        }
    }
}
