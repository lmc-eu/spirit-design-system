@use 'true' as test;
@use '../placement';

@include test.describe('placement functions and mixins') {
    @include test.it('should return correct inverse placements') {
        @include test.assert() {
            @include test.output() {
                $inverse-top: placement.inverse('top');
                $inverse-bottom-start: placement.inverse('bottom-start');
                $inverse-left-end: placement.inverse('left-end');

                // Testing with main-axis-only and hyphenation
                $inverse-top-start-hyphen: placement.inverse('top-start', true, true);
                $inverse-top-start-space: placement.inverse('top-start', true, false);
            }
            @include test.expect() {
                $inverse-top: 'bottom';
                $inverse-bottom-start: 'top';
                $inverse-left-end: 'right';
                $inverse-top-start-hyphen: 'bottom-start';
                $inverse-top-start-space: 'bottom start';
            }
        }
    }

    @include test.it('should apply relative positioning to parent') {
        @include test.assert() {
            @include test.output() {
                .parent-test {
                    @include placement.parent();
                }
            }
            @include test.expect() {
                .parent-test {
                    position: relative;
                }
            }
        }
    }

    @include test.it('should apply absolute positioning to child with z-index') {
        @include test.assert() {
            @include test.output() {
                .child-test {
                    @include placement.child(3);
                }
            }
            @include test.expect() {
                .child-test {
                    position: absolute;
                    z-index: 3;
                }
            }
        }
    }

    @include test.it('should apply custom styles to child variant') {
        @include test.assert() {
            @include test.output() {
                .child-variant-test {
                    @include placement.child-variant('test', 'top', 10px);
                }
            }
            @include test.expect() {
                .child-variant-test {
                    --test-offset: 10px;

                    inset: auto auto 100% 50%;
                    translate: var(--test-offset-orthogonal, -50%) calc(-1 * var(--test-offset, 0));
                    transform-origin: bottom;
                }
            }
        }
    }

    @include test.it('should apply controlled styles to child') {
        @include test.assert() {
            @include test.output() {
                .child-controlled-test {
                    @include placement.child-controlled('test', 10px);
                }
            }
            @include test.expect() {
                .child-controlled-test {
                    --test-offset-orthogonal: 0;
                    --test-offset: 10px;

                    inset: unset;
                    translate: unset;
                }
            }
        }
    }

    @include test.it('should apply styles to arrow') {
        @include test.assert() {
            @include test.output() {
                .arrow-test {
                    @include placement.arrow('test', '10px', '10px', '5px');
                }
            }
            @include test.expect() {
                .arrow-test {
                    --test-arrow-width: 10px;
                    --test-arrow-height: 10px;
                    --test-arrow-corner-offset: 5px;

                    position: absolute;
                    transform-origin: bottom center;
                }
            }
        }
    }

    @include test.it('should apply variant styles to arrow') {
        @include test.assert() {
            @include test.output() {
                .arrow-variant-test {
                    @include placement.arrow-variant('test', 'top');
                }
            }
            @include test.expect() {
                .arrow-variant-test {
                    inset: auto auto 100% 50%;
                    translate: -50% 0%;
                    rotate: z 0deg;
                }
            }
        }
    }

    @include test.it('should apply controlled styles to arrow') {
        @include test.assert() {
            @include test.output() {
                .arrow-controlled-test {
                    @include placement.arrow-controlled();
                }
            }

            @include test.expect() {
                .arrow-controlled-test {
                    inset: unset;
                    translate: unset;
                    transform-origin: center;
                }
            }
        }
    }
}
