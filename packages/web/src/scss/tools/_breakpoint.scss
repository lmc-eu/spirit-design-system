@use 'sass:list';
@use 'sass:string';
@use '@tokens' as tokens;

// Mixin to get the width media query for a breakpoint value in up direction.
//
// Example: up(0) { … } will return …
// Example: up(768px) { … } will return @media (width >= 768px) { … }
//
// Parameters are:
// * $breakpoint-value: the breakpoint value (in pixels)
@mixin up($breakpoint-value) {
    @if $breakpoint-value > 0 {
        @media (width >= $breakpoint-value) {
            @content;
        }
    } @else {
        @content;
    }
}

// Mixin to get the width media query for a breakpoint value in down direction.
//
// Example: down(0) { … } will return …
// Example: down(768px) { … } will return @media (width < 768px) { … }
//
// Parameters are:
// * $breakpoint-value: the breakpoint value (in pixels)
@mixin down($breakpoint-value) {
    @if $breakpoint-value > 0 {
        @media (width < $breakpoint-value) {
            @content;
        }
    } @else {
        @content;
    }
}

// Mixin to get the width media query for a breakpoint value in between direction.
//
// Example: between(0, 768px) { … } will return @media (width >= 0) and (width < 768px) { … }
//
// Parameters are:
// * $min: the minimum breakpoint value (in pixels)
// * $max: the maximum breakpoint value (in pixels)
@mixin between($min, $max) {
    @media (width >= $min) and (width < $max) {
        @content;
    }
}

// Mixin to get the width media query for a breakpoint value in only direction.
//
// Example: only(0) { … } will return @media (width < [next-breakpoint]) { … }
// Example: only([middle-breakpoint]) { … } will return @media (width >= [middle-breakpoint]) and (width < [next-breakpoint]) { … }
// Example: only([last-breakpoint]) { … } will return @media (width >= [last-breakpoint]) { … }
//
// Parameters are:
// * $breakpoint-value: the current breakpoint value (in pixels)
@mixin only($breakpoint-value) {
    $values: ();

    @each $name, $value in tokens.$breakpoints {
        $values: list.append($values, $value);
    }

    $next-value: null;
    $is-last: true;
    $index: list.index($values, $breakpoint-value);

    @if $index and $index < list.length($values) {
        $next-value: list.nth($values, $index + 1);
        $is-last: false;
    }

    @if $breakpoint-value == list.nth($values, 1) {
        @include down($next-value) {
            @content;
        }
    } @else if not $is-last {
        @include between($breakpoint-value, $next-value) {
            @content;
        }
    } @else {
        @include up($breakpoint-value) {
            @content;
        }
    }
}

// Function to get the breakpoint modifier as an infix or a suffix.
//
// Example: get-modifier('infix, 'mobile', 0) will return ''
// Example: get-modifier('infix', 'tablet', 768px) will return 'tablet--'
// Example: get-modifier('suffix', 'tablet', 768px) will return '-tablet'
//
// Parameters are:
// * modifier: [ infix | suffix ]
// * $name: the breakpoint/modifier name to return (e.g. 'tablet')
// * $breakpoint-value: the breakpoint value to decide by (in pixels)
@function get-modifier($modifier, $name, $breakpoint-value) {
    @if $breakpoint-value > 0 {
        @if $modifier == 'infix' {
            @return string.unquote($name + '--');
        }

        @return string.unquote('-' + $name);
    }

    @return '';
}
