@use 'sass:map';
@use 'sass:meta';
@use '@tokens' as tokens;

@mixin generate-css-variables($map, $prefix: '') {
    @each $key, $value in $map {
        @if meta.type-of($value) == map {
            @include generate-css-variables($value, $prefix + '-' + $key);
        } @else {
            --#{$prefix + '-' + $key}: #{$value};
        }
    }
}

@function get-variable-if-exists($variable-name, $fallback-value: '') {
    @if map.has-key(meta.module-variables(tokens), $variable-name) {
        @return map.get(meta.module-variables(tokens), $variable-name);
    } @else {
        @debug 'Token not found: #{$variable-name}. Please add it to your design tokens.';

        @return $fallback-value;
    }
}

// Function to generate a map of responsive values for a given property, size, and token prefix.
//
// Example:
// generate-responsive-map($property: 'border-radius', $token-name: 'radius',  $size: 'small', $variable-prefix: 'form-field', $fallback: 2px) will return:
// (
//   'border-radius-mobile': 4px,
//   'border-radius-tablet': 6px,
//   'border-radius-desktop': 8px,
// )
//
// Parameters are:
// * $property: the base CSS property name (e.g. 'border-radius')
// * $token-name: token name (e.g. 'radius')
// * $size: the size variant (e.g. 'small', 'medium')
// * $variable-prefix: prefix used for the token variable names (e.g. 'form-field')
// * $fallback: value to use if token is not found
@function generate-responsive-map($property, $token-name, $size, $variable-prefix, $fallback) {
    $result: ();

    @each $breakpoint-name, $breakpoint-value in tokens.$breakpoints {
        $key: '#{$property}-#{$breakpoint-name}';
        $variable-name: '#{$variable-prefix}-#{$size}-#{$token-name}-#{$breakpoint-name}';
        $value: get-variable-if-exists($variable-name, $fallback);

        $result: map.merge(
            $result,
            (
                $key: $value,
            )
        );
    }

    @return $result;
}
