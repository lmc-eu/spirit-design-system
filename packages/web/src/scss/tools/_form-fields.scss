// 1. Force the color to be printed as-is, without any color adjustment.
// 2. Put the input above the stretched label.

@use 'sass:map';
@use 'sass:string';
@use '@tokens' as tokens;
@use '../settings/cursors';
@use '../settings/form-fields' as form-fields-settings;
@use 'accessibility';
@use 'reset';
@use 'string' as spirit-string;
@use 'typography';

@mixin label-disabled() {
    color: form-fields-settings.$label-color-state-disabled;

    &::after {
        color: form-fields-settings.$label-color-state-disabled;
    }
}

@mixin label-hidden() {
    @include accessibility.hide-text();
}

@mixin label-required() {
    @include typography.generate(form-fields-settings.$label-required-typography);

    content: '*';
    margin-left: form-fields-settings.$label-required-margin-left;
    color: form-fields-settings.$label-required-color;
}

@mixin input-disabled() {
    color: form-fields-settings.$input-color-state-disabled;
    cursor: cursors.$disabled;
}

@mixin validation-text() {
    @include typography.generate(form-fields-settings.$validation-text-typography);

    display: block;
    margin-top: form-fields-settings.$validation-text-margin-top;

    & > ul {
        @include reset.list();
    }

    & > svg {
        flex-shrink: 0;
    }

    &:has(> svg:first-child:not(:only-child)) {
        display: flex;
        column-gap: form-fields-settings.$validation-text-icon-gap;
    }
}

@mixin validation-text-disabled() {
    color: form-fields-settings.$validation-text-color-state-disabled;
}

@mixin inline-field-root() {
    display: inline-flex;
    margin-block: form-fields-settings.$inline-field-margin-y;
}

@mixin inline-field-root-disabled() {
    cursor: cursors.$disabled;
}

@mixin box-field-root() {
    display: inline-block;
    width: form-fields-settings.$box-field-input-width;
}

@mixin inline-field-label() {
    @include typography.generate(form-fields-settings.$inline-field-label-typography);

    display: block;
    color: form-fields-settings.$label-color-state-default;
    cursor: cursors.$form-fields;
}

@mixin inline-field-label-disabled() {
    @include label-disabled();

    cursor: cursors.$disabled;
}

@mixin box-field-label() {
    @include typography.generate(form-fields-settings.$box-field-label-typography);

    display: block;
    margin-bottom: form-fields-settings.$box-field-label-margin-bottom;
    color: form-fields-settings.$label-color-state-default;
}

@mixin inline-field-input() {
    z-index: 1; // 2.
    appearance: none;
    border: form-fields-settings.$inline-field-input-border-width solid form-fields-settings.$input-border-color;
    background-color: form-fields-settings.$input-background-color;
    cursor: cursors.$form-fields;
    print-color-adjust: exact; // 1.

    &:focus-visible {
        outline: 0;
        box-shadow: form-fields-settings.$input-focus-shadow;
    }

    @media (hover: hover) {
        &:hover {
            background-color: form-fields-settings.$input-background-color-state-hover;
        }
    }

    &:active {
        background-color: form-fields-settings.$input-background-color-state-active;
    }
}

@mixin box-field-input($field-name) {
    // @deprecated Remove typography fallback when form field sizes are mandatory.
    // Migration: delete the `$fallback-config` parameter.
    // https://jira.almacareer.tech/browse/DS-1884 â€” Remove deprecated typography mixin from form fields
    @include typography.from-css-variables(
        $infix: #{spirit-string.convert-pascal-case-to-kebab-case($field-name)}-input,
        $fallback-config: map.get(form-fields-settings.$box-field-size-config, medium, typography, mobile)
    );

    display: block;
    width: 100%;
    padding: form-fields-settings.$box-field-input-padding-y form-fields-settings.$box-field-input-padding-x;
    color: form-fields-settings.$box-field-input-color-state-default;
    border: form-fields-settings.$box-field-input-border-width form-fields-settings.$box-field-input-border-style
        form-fields-settings.$input-border-color;
    border-radius: form-fields-settings.$box-field-input-border-radius;
    background: form-fields-settings.$input-background-color;

    &::placeholder {
        color: form-fields-settings.$box-field-input-placeholder-color-state-default;
        opacity: 1;
    }

    @media (hover: hover) {
        &:hover {
            background-color: form-fields-settings.$input-background-color-state-hover;
        }
    }

    &:active,
    &:focus-within {
        background-color: form-fields-settings.$input-background-color-state-active;
    }
}

@mixin input-field-validation-states($field-name) {
    @each $validation-state-name, $validation-state-value in form-fields-settings.$validation-states {
        @if $field-name == 'FileUploaderInput' {
            :is(.#{$field-name}--#{$validation-state-name}, .#{$field-name}.has-#{$validation-state-name})
                > .#{$field-name}__input
                ~ .#{$field-name}__dropZone {
                border-color: map.get($validation-state-value, input-border-color);
            }
        } @else if $field-name == 'Select' {
            :is(.#{$field-name}--#{$validation-state-name}, .#{$field-name}.has-#{$validation-state-name})
                > .#{$field-name}__inputContainer
                > .#{$field-name}__input {
                border-color: map.get($validation-state-value, input-border-color);
            }
        } @else {
            :is(.#{$field-name}--#{$validation-state-name}, .#{$field-name}.has-#{$validation-state-name})
                > .#{$field-name}__input {
                @if $field-name != 'Toggle' {
                    border-color: map.get($validation-state-value, input-border-color);
                }

                @if $field-name == 'Checkbox' {
                    &:indeterminate,
                    &:checked {
                        background-color: map.get($validation-state-value, input-border-color);
                    }
                }

                @if $field-name == 'Radio' {
                    &::before {
                        background-color: map.get($validation-state-value, input-border-color);
                    }
                }
            }
        }

        @if $field-name == 'TextField' {
            :is(.#{$field-name}--#{$validation-state-name}, .#{$field-name}.has-#{$validation-state-name})
                .#{$field-name}__passwordToggle
                > .#{$field-name}__input
                ~ .#{$field-name}__passwordToggle__button::before {
                border-color: map.get($validation-state-value, input-border-color);
            }
        }

        @if $field-name != 'Checkbox' or $field-name != 'Radio' {
            :is(.#{$field-name}--#{$validation-state-name}, .#{$field-name}.has-#{$validation-state-name})
                :is(
                    .#{$field-name}__validationText,
                    .#{$field-name}__validationText,
                    [data-spirit-element='validation_text']
                ) {
                color: map.get($validation-state-value, validation-text-color);
            }
        }
    }
}

@mixin box-field-fluid() {
    width: 100%;
}

@mixin box-field-focus-visible() {
    border-color: form-fields-settings.$box-field-input-border-color-focus;
    outline: 0;
    box-shadow: form-fields-settings.$input-focus-shadow;
}

@mixin box-field-disabled-input() {
    @include input-disabled();

    border-color: form-fields-settings.$input-border-color-state-disabled;
    background-color: form-fields-settings.$input-background-color-state-disabled;

    &::placeholder {
        color: form-fields-settings.$box-field-input-placeholder-color-state-disabled;
    }
}

@mixin item() {
    align-items: center;
    width: 100%;
    padding: form-fields-settings.$item-padding-y form-fields-settings.$item-padding-x;
    margin-block: 0;
    border-radius: form-fields-settings.$item-border-radius;
    background-color: form-fields-settings.$item-background-color-state-default;

    @media (hover: hover) {
        &:hover {
            background-color: form-fields-settings.$item-background-color-state-hover;
        }
    }

    &:active {
        background-color: form-fields-settings.$item-background-color-state-active;
    }
}

@mixin item-disabled() {
    background-color: form-fields-settings.$item-background-color-state-default;
}

@mixin item-validation-text() {
    @include typography.generate(form-fields-settings.$item-validation-text-typography);
}

@mixin item-label() {
    @include typography.generate(form-fields-settings.$item-label-typography);

    color: form-fields-settings.$label-color-state-default;
}

@mixin helper-text() {
    @include typography.generate(form-fields-settings.$helper-text-typography);

    display: block;
    margin-top: form-fields-settings.$helper-text-margin-top;
    color: form-fields-settings.$helper-text-color-state-default;
}

@mixin helper-text-disabled() {
    color: form-fields-settings.$helper-text-color-state-disabled;
}

@mixin item-helper-text() {
    @include typography.generate(form-fields-settings.$item-helper-text-typography);
}

@mixin stretch($pseudo-element: before) {
    &::#{$pseudo-element} {
        content: '';
        position: absolute;
        inset: 0;
        z-index: 0;
    }
}
